Keeping track of the top 10 risks throughout our sprints

See README for a more detailed

Sprint 4:
1.
    PROBLEM: ReactJS warnings for column keys in console
    SOL: Assign keys to rows

2.  PROBLEM: No TLS between server-client
    SOL: Implement HTTPS

3.  PROBLEM: Improper seed data for tasks
    SOL: Change seeds and send to main

4.  PROBLEM: Error 500 on Packaging page
    SOL: Find error and correct bug

5.  PROBLEM: Infinite loop of warnings in console for scheduling
    SOL: Troubleshoot webpack for issues

6.  PROBLEM: Testing needed for new features
    SOL: Auto-generate tests using ecto cmds

7.  PROBLEM: front-end JWT management not secure
    SOL: Refactor needed

8.  PROBLEM: typo's found in tasks backend
    SOL: Fix and review

9.  PROBLEM: Planning/Tasls duplicating methods
    SOL: Refactor and re-define code layout for that module

10. PROBLEM: Various warnings client-side from props
    SOL: delay unless breaking page


Sprint 3:
1.
    PROBLEM: Orders Table has two ID columns
    SOL: Elimnate one of the IDs

2.  PROBLEM: Trouble properly generating API tests
    SOL: Elimnate test examples from most of code

3.  PROBLEM: Difficulty Simulating time for demo
    SOL: Determine which component is cause the problem and fix it

4.  PROBLEM: Sales not connecting to backend
    SOL: Dedicate team to ensuring functionality

5.  PROBLEM: Material UI Styles Leaking
    SOL: Troubleshoot webpack for issues

6.  PROBLEM: No TLS between server-client
    SOL: Implement HTTPS

7.  PROBLEM: User roles not defined WRT authorization
    SOL: After site visibility for clients

8.  PROBLEM: Orders Seed is improperly defined for Primary Key
    SOL: Delete secondary Key

9.  PROBLEM: Lack of sufficient code commenting causing confusion
    SOL: Comment out the entire project

10. PROBLEM: Various warnings client-side from props
    SOL: Delay unless breaking page


Sprint 2:
1. 
    PROBLEM: Not completing Sales and Vendor modules early enough to leave time to create ledger, accounts receivable and accounts payable 
    SOL: Communicate better amongst a team and try to get the work done earlier.

2.  PROBLEM: Miscommunication with product owner on what is expected from the  
    SOL: Ask numerous different questions to Fatima in order to build a clear image.

3.  PROBLEM: CSS from certain components could cause issues in other components.
    SOL: Determine which component is causing the problem and fix it.

4.  PROBLEM: Miscommunication amongst teams and not having the expected result we needed to work cohesively.
    SOL: Communicate extensively with teammates

5.  PROBLEM: Scheduling conflicts with respect to other courses. Difficult to meet with teams and keep an open dialogue.
    SOL: Create team meetings at the beginning of each sprint and set dates in advance.
    
6.  PROBLEM: Potential issues with respect to bad time estimation. 
    SOL: Re-evaluate user story point assignment for issues.

7.  PROBLEM: Slow request-response times with respect to communication between client (React) and server (Phoenix).
    SOL: Determine which component is causing the bottleneck and eliminate any inefficiencies.

8.  PROBLEM: Getting up to speed on Elixir while respecting project time constraints.
    SOL: Time management and extreme programming.

9.  PROBLEM: Insufficient planning with respect to testing for the front-end. 
    SOL: Find a React testing framework and begin unit testing.

10. PROBLEM: Late completion of the work means a possible problem with creating elaborate tests for the software.
    SOL: Finish early!

    



Sprint 1:
1. 
    PROBLEM: Poor understanding of high-level project requirements. 
    SOL: Further discuss requirements with Product Owner, such as how clients will purchase products (bikes).

2.  PROBLEM: Using potentially outdated architecture client-side (class components vs functional). 
    SOL: Identify best practices using React documentation, and identify the optimal solution based on selected UI Framework.

3.  PROBLEM: Slow request-response times with respect to communication between client (React) and server (Phoenix).
    SOL: Determine which component is causing the bottleneck and eliminate any inefficiencies.

4.  PROBLEM: Issues with authentication feature.
    SOL: Need to identify if the issue is a result of improper form validation or if it is server-side.

5.  PROBLEM: Scheduling conflicts with respect to other courses. Difficult to meet with teams and keep an open dialogue.
    SOL: Create team meetings at the beginning of each sprint and set dates in advance.

6.  PROBLEM: Getting up to speed on Elixir while respecting project time constraints.
    SOL: Time management and extreme programming.
    
7.  PROBLEM: Potential issues with respect to bad time estimation. 
    SOL: Re-evaluate user story point assignment for issues.

8.  PROBLEM: Creating multiple prototypes as per project requirements. More difficult than anticipated (scope creep).
    SOL: Create prototypes that will be relevant to the project moving forward (can recycle work).

9.  PROBLEM: Insufficient planning with respect to testing for the front-end. 
    SOL: Find a React testing framework and begin unit testing.

10. PROBLEM: Project architecture and testing document deadlines approaching.
    SOL: Finish them!

    